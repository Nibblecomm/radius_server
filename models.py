#autogenerated by sqlautocode

from sqlalchemy import Integer,VARCHAR,create_engine,Column,ForeignKey,DateTime,BigInteger
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relation,relationship
from sqlalchemy.types import TypeDecorator, Unicode
import json
import datetime

#try to load configuration
import os
import sys
import inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)
from unifispot.core.db import JSONEncodedDict
try:
    from instance.cloud_config import SQLALCHEMY_DATABASE_URI
except:
    SQLALCHEMY_DATABASE_URI = 'sqlite:///'+os.path.join(parentdir,'instance','database.db')




engine = create_engine(SQLALCHEMY_DATABASE_URI,echo=False,pool_size=5, max_overflow=5)
DeclarativeBase = declarative_base()
metadata = DeclarativeBase.metadata
metadata.bind = engine



class Radiusnas(DeclarativeBase):
    '''Model to handle Radius clients

    '''
    __tablename__ = 'radiusnas'

    __table_args__ = {}
    id                  = Column(Integer, primary_key=True)
    account_id          = Column(Integer, ForeignKey('account.id'))
    siteid              = Column(Integer, ForeignKey('wifisite.id'))
    secret              = Column(VARCHAR(50),index=True)
    extip               = Column(VARCHAR(50),index=True)
    identity            = Column(VARCHAR(50),index=True,unique=True)
    vendor_id           = Column(Integer)
    demo                = Column(Integer,default=0)

class Radiususer(DeclarativeBase):
    '''Model to handle Radius sessions

    '''
    __tablename__ = 'radiususer'

    __table_args__ = {}
    id                  = Column(Integer, primary_key=True)
    account_id          = Column(Integer, ForeignKey('account.id'))
    nas_id              = Column(Integer, ForeignKey('radiusnas.id'))
    guestsessionid      = Column(Integer, ForeignKey('guestsession.id'))
    radiususer          = Column(VARCHAR(50),index=True,unique=True)
    radiuspass          = Column(VARCHAR(50),index=True)
    mac                 = Column(VARCHAR(30),index=True)
    duration            = Column(Integer,default=0)
    data_limit          = Column(BigInteger) #in MB
    speed_ul            = Column(Integer,default=0)
    speed_dl            = Column(Integer,default=0)
    active              = Column(Integer,default=1)
    starttime           = Column(DateTime,default=datetime.datetime.utcnow,index=True)
    stoptime            = Column(DateTime,default=datetime.datetime.utcnow,index=True)



class Radiussessions(DeclarativeBase):
    '''Model to handle Radius sessions

    '''
    __tablename__       = 'radiussessions'

    id                  = Column(Integer, primary_key=True)
    nas_id              = Column(Integer, ForeignKey('radiusnas.id'))
    radiususer_id       = Column(Integer, ForeignKey('radiususer.id'))
    assoc_time          = Column(DateTime,default=datetime.datetime.utcnow,index=True)
    disassoc_time       = Column(DateTime,index=True)   #Time at which session is stopped, to be filled by session updator
    lastseen_time       = Column(DateTime,default=datetime.datetime.utcnow,index=True)   #Time at which session is stopped, to be filled by session updator
    duration            = Column(BigInteger,default=0)
    data_used           = Column(VARCHAR(20),default=0)            #Data used up in this session
    mac                 = Column(VARCHAR(30),index=True)
    accnt_sessionid     = Column(VARCHAR(30),index=True)  #_id of document in guest collection of unifi
    framed_ip_address   = Column(VARCHAR(30),index=True)  #_id of document in guest collection of unifi